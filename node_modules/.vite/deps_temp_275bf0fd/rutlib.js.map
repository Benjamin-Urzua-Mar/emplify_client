{
  "version": 3,
  "sources": ["../../rutlib/src/index.ts"],
  "sourcesContent": ["function cleanRut(rut: string): string {\n  /**\n   * Delete all non-numeric characters from a RUT.\n   * @param rut  RUT string\n   * @return {string} RUT without non-numeric characters.\n   */\n  return typeof rut === 'string'\n    ? rut.replace(/^0+|[^0-9kK]+/g, '').toUpperCase()\n    : '';\n}\n\nfunction validateRut(rut: string): boolean {\n  /**\n   * Verify if a RUT is valid.\n   * @param rut  RUT string\n   * @return {boolean} true if RUT is valid, false otherwise.\n   */\n  if (/^0+/.test(rut)) {\n    return false;\n  }\n  if (!/^0*(\\d{1,3}(\\.?\\d{3})*)-?([\\dkK])$/.test(rut)) {\n    return false;\n  }\n  const cleanedRut = cleanRut(rut);\n\n  let rutNumbers = parseInt(cleanedRut.slice(0, -1), 10);\n  const rutLastDigit = cleanedRut.slice(-1);\n  let M = 0,\n    S = 1;\n  for (; rutNumbers; rutNumbers = Math.floor(rutNumbers / 10))\n    S = (S + (rutNumbers % 10) * (9 - (M++ % 6))) % 11;\n  const lastDigitValid =  (S ? S - 1 : 'K').toString();\n  return lastDigitValid === rutLastDigit;\n}\n\n\n\nfunction getLastDigitOfRut(rutNumbers:number): string {\n  /**\n   * Get de verificator digit of a RUT.\n   * @param rutNumbers  RUT numbers\n   * @return {string} RUT last digit.\n   */\n\n  let M = 0,\n    S = 1;\n  for (; rutNumbers; rutNumbers = Math.floor(rutNumbers / 10))\n    S = (S + (rutNumbers % 10) * (9 - (M++ % 6))) % 11;\n  const lastDigitValid =  (S ? S - 1 : 'K').toString();\n  return lastDigitValid;\n}\n\nfunction formatRut (rut:string, withDots:boolean = true): string  {\n  /**\n   * Format a RUT to a valid format.\n   * @param rut  RUT string\n   * @param withDots  true if RUT should be formatted with dots, false otherwise.\n   * @return {string} RUT formatted.\n   */\n  rut = cleanRut(rut);\n  let rutFormatted; \n  if (withDots) {\n    rutFormatted = rut.slice(-4, -1) + '-' + rut.substr(rut.length - 1);\n    for (let i = 4; i < rut.length; i += 3) {\n      rutFormatted = rut.slice(-3 - i, -i) + '.' + rutFormatted;\n    }\n  } else {\n    rutFormatted = rut.slice(0, -1) + '-' + rut.substr(rut.length - 1);\n  }\n\n  return rutFormatted;\n}\n\nfunction generateRut (length:number = 8, formated:boolean=true): string  {\n  /**\n   * Generate a RUT with a random number.\n   * @param length  RUT length\n   * @param formated  true if RUT should be formatted, false otherwise.\n   * @return {string} RUT generated.\n   */\n  if (length === 0) {\n    return '';\n  }\n  let rutNumbers = Math.floor(Math.random() * Math.pow(10, length));\n  const lengthRutNumbers = rutNumbers.toString().length;\n  while (lengthRutNumbers < length) {\n    rutNumbers = Math.floor(Math.random() * Math.pow(10, length));\n  }\n  const rutLastDigit = getLastDigitOfRut(rutNumbers);\n  const rutGenerated = formatRut(rutNumbers.toString() + rutLastDigit, formated);\n  return rutGenerated;\n}\n\nexport { \n  cleanRut, \n  validateRut, \n  getLastDigitOfRut, \n  formatRut,\n  generateRut \n};         \n"],
  "mappings": ";;;;;;;;;AAAA,aAAS,SAAS,KAAW;AAM3B,aAAO,OAAO,QAAQ,WAClB,IAAI,QAAQ,kBAAkB,EAAE,EAAE,YAAW,IAC7C;IACN;AAqFE,YAAA,WAAA;AAnFF,aAAS,YAAY,KAAW;AAM9B,UAAI,MAAM,KAAK,GAAG,GAAG;AACnB,eAAO;;AAET,UAAI,CAAC,qCAAqC,KAAK,GAAG,GAAG;AACnD,eAAO;;AAET,UAAM,aAAa,SAAS,GAAG;AAE/B,UAAI,aAAa,SAAS,WAAW,MAAM,GAAG,EAAE,GAAG,EAAE;AACrD,UAAM,eAAe,WAAW,MAAM,EAAE;AACxC,UAAI,IAAI,GACN,IAAI;AACN,aAAO,YAAY,aAAa,KAAK,MAAM,aAAa,EAAE;AACxD,aAAK,IAAK,aAAa,MAAO,IAAK,MAAM,MAAO;AAClD,UAAM,kBAAmB,IAAI,IAAI,IAAI,KAAK,SAAQ;AAClD,aAAO,mBAAmB;IAC5B;AA8DE,YAAA,cAAA;AA1DF,aAAS,kBAAkB,YAAiB;AAO1C,UAAI,IAAI,GACN,IAAI;AACN,aAAO,YAAY,aAAa,KAAK,MAAM,aAAa,EAAE;AACxD,aAAK,IAAK,aAAa,MAAO,IAAK,MAAM,MAAO;AAClD,UAAM,kBAAmB,IAAI,IAAI,IAAI,KAAK,SAAQ;AAClD,aAAO;IACT;AA8CE,YAAA,oBAAA;AA5CF,aAAS,UAAW,KAAY,UAAuB;AAAvB,UAAA,aAAA,QAAA;AAAA,mBAAA;MAAuB;AAOrD,YAAM,SAAS,GAAG;AAClB,UAAI;AACJ,UAAI,UAAU;AACZ,uBAAe,IAAI,MAAM,IAAI,EAAE,IAAI,MAAM,IAAI,OAAO,IAAI,SAAS,CAAC;AAClE,iBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,yBAAe,IAAI,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,MAAM;;aAE1C;AACL,uBAAe,IAAI,MAAM,GAAG,EAAE,IAAI,MAAM,IAAI,OAAO,IAAI,SAAS,CAAC;;AAGnE,aAAO;IACT;AA0BE,YAAA,YAAA;AAxBF,aAAS,YAAa,QAAmB,UAAqB;AAAxC,UAAA,WAAA,QAAA;AAAA,iBAAA;MAAiB;AAAE,UAAA,aAAA,QAAA;AAAA,mBAAA;MAAqB;AAO5D,UAAI,WAAW,GAAG;AAChB,eAAO;;AAET,UAAI,aAAa,KAAK,MAAM,KAAK,OAAM,IAAK,KAAK,IAAI,IAAI,MAAM,CAAC;AAChE,UAAM,mBAAmB,WAAW,SAAQ,EAAG;AAC/C,aAAO,mBAAmB,QAAQ;AAChC,qBAAa,KAAK,MAAM,KAAK,OAAM,IAAK,KAAK,IAAI,IAAI,MAAM,CAAC;;AAE9D,UAAM,eAAe,kBAAkB,UAAU;AACjD,UAAM,eAAe,UAAU,WAAW,SAAQ,IAAK,cAAc,QAAQ;AAC7E,aAAO;IACT;AAOE,YAAA,cAAA;;;",
  "names": []
}
